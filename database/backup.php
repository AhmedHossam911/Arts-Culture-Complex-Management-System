<?php



require_once __DIR__ . '/../includes/config.php';


if (php_sapi_name() !== 'cli') {
    die('This script can only be run from command line');
}

class DatabaseBackup {
    private $db;
    private $backupDir;
    
    public function __construct($db) {
        $this->db = $db;
        $this->backupDir = __DIR__ . '/backups';
        $this->ensureBackupDirectoryExists();
    }
    
    private function ensureBackupDirectoryExists() {
        if (!file_exists($this->backupDir)) {
            mkdir($this->backupDir, 0755, true);
        }
    }
    
    public function createBackup() {
        $backupFile = $this->backupDir . '/backup-' . date('Y-m-d-H-i-s') . '.sql';
        
        
        $tables = [];
        $result = $this->db->query('SHOW TABLES');
        while ($row = $result->fetch_row()) {
            $tables[] = $row[0];
        }
        
        $output = "-- Database Backup - " . date('Y-m-d H:i:s') . "\n";
        $output .= "-- Generated by backup.php\n\n";
        
        
        $output .= "SET FOREIGN_KEY_CHECKS=0;\n\n";
        
        foreach ($tables as $table) {
            
            if ($table === 'migrations') {
                continue;
            }
            
            
            $output .= "DROP TABLE IF EXISTS `$table`;\n";
            
            
            $createResult = $this->db->query("SHOW CREATE TABLE `$table`");
            $row = $createResult->fetch_row();
            $output .= $row[1] . ";\n\n";
            
            
            $result = $this->db->query("SELECT * FROM `$table`");
            
            if ($result->num_rows > 0) {
                $output .= "--\n-- Dumping data for table `$table`\n--\n\n";
                
                while ($row = $result->fetch_assoc()) {
                    $keys = array_map([$this->db, 'real_escape_string'], array_keys($row));
                    $values = array_map([$this->db, 'real_escape_string'], array_values($row));
                    
                    $output .= "INSERT INTO `$table` (`" . implode('`, `', $keys) . "`) VALUES ('" . implode("', '", $values) . "');\n";
                }
                
                $output .= "\n";
            }
        }
        
        
        $output .= "SET FOREIGN_KEY_CHECKS=1;\n";
        
        
        if (file_put_contents($backupFile, $output) !== false) {
            echo "Backup created successfully: " . basename($backupFile) . "\n";
            
            
            $this->cleanupOldBackups();
            
            return true;
        } else {
            echo "Failed to create backup file.\n";
            return false;
        }
    }
    
    private function cleanupOldBackups() {
        $files = glob($this->backupDir . '/backup-*.sql');
        $now = time();
        $daysToKeep = 7;
        
        foreach ($files as $file) {
            if (is_file($file)) {
                
                $fileTime = filemtime($file);
                
                
                $ageInDays = ($now - $fileTime) / (60 * 60 * 24);
                
                
                if ($ageInDays > $daysToKeep) {
                    unlink($file);
                    echo "Deleted old backup: " . basename($file) . "\n";
                }
            }
        }
    }
}


$backup = new DatabaseBackup($db->Connection);
$backup->createBackup();
